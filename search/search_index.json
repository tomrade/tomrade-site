{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Page About Intrusion Analyst Place to record my stuff Wanted to use Github Pages for something","title":"About"},{"location":"#home-page","text":"","title":"Home Page"},{"location":"#about","text":"Intrusion Analyst Place to record my stuff Wanted to use Github Pages for something","title":"About"},{"location":"event_logs/","text":"Windows Event Logging Enable Process Auditing To enable proceess auditing (advanced audit) you need to set the following policy To enabled commandline logging along with this do the following. You should now have events * \"4688\" Process Creation * \"4689\" Process Termination Example - <Event xmlns= \"http://schemas.microsoft.com/win/2004/08/events/event\" > - <System> <Provider Name= \"Microsoft-Windows-Security-Auditing\" Guid= \"{54849625-5478-4994-a5ba-3e3b0328c30d}\" /> <EventID> 4688 </EventID> <Version> 2 </Version> <Level> 0 </Level> <Task> 13312 </Task> <Opcode> 0 </Opcode> <Keywords> 0x8020000000000000 </Keywords> <TimeCreated SystemTime= \"2021-03-20T17:23:35.334603100Z\" /> <EventRecordID> 18980 </EventRecordID> <Correlation /> <Execution ProcessID= \"4\" ThreadID= \"248\" /> <Channel> Security </Channel> <Computer> WIN-NDA8UIVGAA8 </Computer> <Security /> </System> - <EventData> <Data Name= \"SubjectUserSid\" > S-1-5-21-108682653-446161091-3115200861-500 </Data> <Data Name= \"SubjectUserName\" > Administrator </Data> <Data Name= \"SubjectDomainName\" > WIN-NDA8UIVGAA8 </Data> <Data Name= \"SubjectLogonId\" > 0x51865 </Data> <Data Name= \"NewProcessId\" > 0x1320 </Data> <Data Name= \"NewProcessName\" > C:\\Windows\\System32\\mmc.exe </Data> <Data Name= \"TokenElevationType\" > %%1936 </Data> <Data Name= \"ProcessId\" > 0xeb4 </Data> <Data Name= \"CommandLine\" > \"C:\\Windows\\system32\\mmc.exe\" C:\\Windows\\system32\\gpedit.msc </Data> <Data Name= \"TargetUserSid\" > S-1-0-0 </Data> <Data Name= \"TargetUserName\" > - </Data> <Data Name= \"TargetDomainName\" > - </Data> <Data Name= \"TargetLogonId\" > 0x0 </Data> <Data Name= \"ParentProcessName\" > C:\\Windows\\explorer.exe </Data> <Data Name= \"MandatoryLabel\" > S-1-16-12288 </Data> </EventData> </Event>","title":"Basics"},{"location":"event_logs/#windows-event-logging","text":"","title":"Windows Event Logging"},{"location":"event_logs/#enable-process-auditing","text":"To enable proceess auditing (advanced audit) you need to set the following policy To enabled commandline logging along with this do the following. You should now have events * \"4688\" Process Creation * \"4689\" Process Termination Example - <Event xmlns= \"http://schemas.microsoft.com/win/2004/08/events/event\" > - <System> <Provider Name= \"Microsoft-Windows-Security-Auditing\" Guid= \"{54849625-5478-4994-a5ba-3e3b0328c30d}\" /> <EventID> 4688 </EventID> <Version> 2 </Version> <Level> 0 </Level> <Task> 13312 </Task> <Opcode> 0 </Opcode> <Keywords> 0x8020000000000000 </Keywords> <TimeCreated SystemTime= \"2021-03-20T17:23:35.334603100Z\" /> <EventRecordID> 18980 </EventRecordID> <Correlation /> <Execution ProcessID= \"4\" ThreadID= \"248\" /> <Channel> Security </Channel> <Computer> WIN-NDA8UIVGAA8 </Computer> <Security /> </System> - <EventData> <Data Name= \"SubjectUserSid\" > S-1-5-21-108682653-446161091-3115200861-500 </Data> <Data Name= \"SubjectUserName\" > Administrator </Data> <Data Name= \"SubjectDomainName\" > WIN-NDA8UIVGAA8 </Data> <Data Name= \"SubjectLogonId\" > 0x51865 </Data> <Data Name= \"NewProcessId\" > 0x1320 </Data> <Data Name= \"NewProcessName\" > C:\\Windows\\System32\\mmc.exe </Data> <Data Name= \"TokenElevationType\" > %%1936 </Data> <Data Name= \"ProcessId\" > 0xeb4 </Data> <Data Name= \"CommandLine\" > \"C:\\Windows\\system32\\mmc.exe\" C:\\Windows\\system32\\gpedit.msc </Data> <Data Name= \"TargetUserSid\" > S-1-0-0 </Data> <Data Name= \"TargetUserName\" > - </Data> <Data Name= \"TargetDomainName\" > - </Data> <Data Name= \"TargetLogonId\" > 0x0 </Data> <Data Name= \"ParentProcessName\" > C:\\Windows\\explorer.exe </Data> <Data Name= \"MandatoryLabel\" > S-1-16-12288 </Data> </EventData> </Event>","title":"Enable Process Auditing"},{"location":"hyperv/","text":"HyperV stuff Random notes for myself Boot Ubuntu ISOs on hyperv I noticed the default hyperv gen2 vm uses secure boot. In order to boot ubuntu iso files (For example server builds if you dont want the stock gallery desktop vm), many blogs mentioned disabling secure boot, however Canonical seem to have have signed the image using the MS Cert which works as well if you switch the option to the \"UEFI\" option. Nested Hyper V Nested HyperV is currently Intel only unless using Windows Insider. You need to turn off dynamic memory when using nested hyperv To enable Nested hyper VM (per vm) Set-VMProcessor -VMName \"My VM Name\" -ExposeVirtualizationExtensions $true","title":"HyperV"},{"location":"hyperv/#hyperv-stuff","text":"Random notes for myself","title":"HyperV stuff"},{"location":"hyperv/#boot-ubuntu-isos-on-hyperv","text":"I noticed the default hyperv gen2 vm uses secure boot. In order to boot ubuntu iso files (For example server builds if you dont want the stock gallery desktop vm), many blogs mentioned disabling secure boot, however Canonical seem to have have signed the image using the MS Cert which works as well if you switch the option to the \"UEFI\" option.","title":"Boot Ubuntu ISOs on hyperv"},{"location":"hyperv/#nested-hyper-v","text":"Nested HyperV is currently Intel only unless using Windows Insider. You need to turn off dynamic memory when using nested hyperv To enable Nested hyper VM (per vm) Set-VMProcessor -VMName \"My VM Name\" -ExposeVirtualizationExtensions $true","title":"Nested Hyper V"},{"location":"iis/","text":"IIS Stuff Docker Container If you are using a docker container for IIS , dont forget to use \"logmonitor\" from microsoft in order to echo the web logs to STDOUT for docker or map the log directory. You can do this by using a dockerfile and the \"SHELL\" command. Log monitor","title":"iis"},{"location":"iis/#iis-stuff","text":"","title":"IIS Stuff"},{"location":"iis/#docker-container","text":"If you are using a docker container for IIS , dont forget to use \"logmonitor\" from microsoft in order to echo the web logs to STDOUT for docker or map the log directory. You can do this by using a dockerfile and the \"SHELL\" command. Log monitor","title":"Docker Container"},{"location":"links/","text":"Useful Links Security Documentation and Wikis MkDocs - Simple python static site generator that this site is using. MkDocs Material - Material Theme for MkDocs.","title":"Useful Links"},{"location":"links/#useful-links","text":"Security Documentation and Wikis MkDocs - Simple python static site generator that this site is using. MkDocs Material - Material Theme for MkDocs.","title":"Useful Links"},{"location":"projects/","text":"EVTX NOM EVTX NOM is a Windows event log (evtx) ingest python script for Elasticsearch or Splunk. Event message string reconstruction and optional mappings. Was created based on experience of having to quickly deal with large volumes of EVTX files with some enrichment to help analysis vs the bare XML fields.","title":"Security"},{"location":"projects/#evtx-nom","text":"EVTX NOM is a Windows event log (evtx) ingest python script for Elasticsearch or Splunk. Event message string reconstruction and optional mappings. Was created based on experience of having to quickly deal with large volumes of EVTX files with some enrichment to help analysis vs the bare XML fields.","title":"EVTX NOM"},{"location":"welm/","text":"WELM Usage What is WELM WELM or \" Windows-Event-Log-Messages \" is a tool developed by NSACYBER (Snowdens ex) to dump some event/EVT data and strings from a Windows system. This can then be used to enrich log and trace information in analysis platforms in order reconstruct event messages. The Windows Event Log Messages (WELM) tool retrieves the definitions of Windows Event Log messages embedded in binaries. The tool's output can be used to create an exhaustive list of event information for an operating system. They also published datasets for various operating systems but stopped in 2017 for some reason. Most of the core events are the same however its useful to dump newer builds. The code hasnt been updated since 2017 but still works today (2020). The \"Official\" way to compile it , is via Visual Studio however I had some concerns on using this because. The environment I was working in may have breached the VS community license restrictions , as although welm is opensource (allowed), NSAGOV uses a CC license (why?????) which is not an OSI recognised license (required by MS for OSS + enterprise usage of Visual Studio community). Visual Studio is huuuuge (19gb on my test vm) This worked on my machine (Win 10 Pro 2004) YMMV. Compiling without Visual Studio Install MSbuild and DOTNET You First need to install the .NET build platform (MSBUILD) , you can use the Visual Studio Tools installer for this. Go to visualstudio.microsoft.com/downloads/ Scroll down to the bit that says \"Tools for Visual Studio\" Install the \".Net desktop build tools\". You should now have a special powershell and command prompt for building shiz. You can add this to Windows Terminal with the following config. { // Todo se t a ico n . \"name\" : \"Visual Studio 2019 PS\" , \"commandline\" : \"C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -noe -c \\\"&{Import-Module \\\"\\\"\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\BuildTools\\\\Common7\\\\Tools\\\\Microsoft.VisualStudio.DevShell.dll\\\"\\\"\\\"; Enter-VsDevShell e8d3f04a}\\\"\" , \"hidden\" : false } Install Nuget Now we need nuget to fetch the packages, I found this in the same installer but couldnt find the files once done (no updatedb and locate for me on windows). So I just downloaded it from the nuget site and placed it in C:\\ as im super lazy and paths whatever. Grab the WELM Download the latest WELM code from https://github.com/nsacyber/Windows-Event-Log-Messages/releases Extract this ZIP and change to the \"welm\" folder, should look like this Install packages with nuget Now we need to install our packages, There are 2 C# projects WelmConsole and WelmLibrary . We need to install into a folder called Packages as thats what our bro Visual Studio would do. C : \\ nuget . exe install .\\ WelmConsole \\ packages . config -OutputDirectory Packages C : \\ nuget . exe install .\\ WelmLibrary \\ packages . config -OutputDirectory Packages Build with MSbuild Now we can press the button, open your special development powershell we got earlier. Change directory to our welm folder and cast MSbuild against the project file MSBuild . exe .\\ welm . sln / p : Configuration = Release You may get some warnings but its not building if you dont get that right???. If you see red you most likely are missing either dontnet4-4.6 SDK or your nuget was wrong. Run WELM AKA living the dream You will now have a ready build under welm\\WelmConsole\\bin\\Release\\ . You should copy this to machine you want dump strings from . The idea is you want to install anything you want to dump strings from, There are some guides on running it with some setup scripts to help you get the most strings for your money are here . The main binary is WelmConsole.exe . This is what is used to dump details Providers - the Event/ETL groupings ie \"yadda yadda auditing\" Logs - The actually files (evtx) that these are written to Events - The actually events strings + template options (this is what you normally want) You can run WELM (dont forget to level up to admin) as described in the project wiki for example to dump events to csv WelmConsole.exe -e -f csv events.csv produced This isnt instant and took at least \"a cup of tea making\" time on my 2nd gen Ryzen 7. You likely want JSON for other tooling but CSV is great for looking at by hand.","title":"WELM usage"},{"location":"welm/#welm-usage","text":"","title":"WELM Usage"},{"location":"welm/#what-is-welm","text":"WELM or \" Windows-Event-Log-Messages \" is a tool developed by NSACYBER (Snowdens ex) to dump some event/EVT data and strings from a Windows system. This can then be used to enrich log and trace information in analysis platforms in order reconstruct event messages. The Windows Event Log Messages (WELM) tool retrieves the definitions of Windows Event Log messages embedded in binaries. The tool's output can be used to create an exhaustive list of event information for an operating system. They also published datasets for various operating systems but stopped in 2017 for some reason. Most of the core events are the same however its useful to dump newer builds. The code hasnt been updated since 2017 but still works today (2020). The \"Official\" way to compile it , is via Visual Studio however I had some concerns on using this because. The environment I was working in may have breached the VS community license restrictions , as although welm is opensource (allowed), NSAGOV uses a CC license (why?????) which is not an OSI recognised license (required by MS for OSS + enterprise usage of Visual Studio community). Visual Studio is huuuuge (19gb on my test vm) This worked on my machine (Win 10 Pro 2004) YMMV.","title":"What is WELM"},{"location":"welm/#compiling-without-visual-studio","text":"","title":"Compiling without Visual Studio"},{"location":"welm/#install-msbuild-and-dotnet","text":"You First need to install the .NET build platform (MSBUILD) , you can use the Visual Studio Tools installer for this. Go to visualstudio.microsoft.com/downloads/ Scroll down to the bit that says \"Tools for Visual Studio\" Install the \".Net desktop build tools\". You should now have a special powershell and command prompt for building shiz. You can add this to Windows Terminal with the following config. { // Todo se t a ico n . \"name\" : \"Visual Studio 2019 PS\" , \"commandline\" : \"C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -noe -c \\\"&{Import-Module \\\"\\\"\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\BuildTools\\\\Common7\\\\Tools\\\\Microsoft.VisualStudio.DevShell.dll\\\"\\\"\\\"; Enter-VsDevShell e8d3f04a}\\\"\" , \"hidden\" : false }","title":"Install MSbuild and DOTNET"},{"location":"welm/#install-nuget","text":"Now we need nuget to fetch the packages, I found this in the same installer but couldnt find the files once done (no updatedb and locate for me on windows). So I just downloaded it from the nuget site and placed it in C:\\ as im super lazy and paths whatever.","title":"Install Nuget"},{"location":"welm/#grab-the-welm","text":"Download the latest WELM code from https://github.com/nsacyber/Windows-Event-Log-Messages/releases Extract this ZIP and change to the \"welm\" folder, should look like this","title":"Grab the WELM"},{"location":"welm/#install-packages-with-nuget","text":"Now we need to install our packages, There are 2 C# projects WelmConsole and WelmLibrary . We need to install into a folder called Packages as thats what our bro Visual Studio would do. C : \\ nuget . exe install .\\ WelmConsole \\ packages . config -OutputDirectory Packages C : \\ nuget . exe install .\\ WelmLibrary \\ packages . config -OutputDirectory Packages","title":"Install packages with nuget"},{"location":"welm/#build-with-msbuild","text":"Now we can press the button, open your special development powershell we got earlier. Change directory to our welm folder and cast MSbuild against the project file MSBuild . exe .\\ welm . sln / p : Configuration = Release You may get some warnings but its not building if you dont get that right???. If you see red you most likely are missing either dontnet4-4.6 SDK or your nuget was wrong.","title":"Build with MSbuild"},{"location":"welm/#run-welm-aka-living-the-dream","text":"You will now have a ready build under welm\\WelmConsole\\bin\\Release\\ . You should copy this to machine you want dump strings from . The idea is you want to install anything you want to dump strings from, There are some guides on running it with some setup scripts to help you get the most strings for your money are here . The main binary is WelmConsole.exe . This is what is used to dump details Providers - the Event/ETL groupings ie \"yadda yadda auditing\" Logs - The actually files (evtx) that these are written to Events - The actually events strings + template options (this is what you normally want) You can run WELM (dont forget to level up to admin) as described in the project wiki for example to dump events to csv WelmConsole.exe -e -f csv events.csv produced This isnt instant and took at least \"a cup of tea making\" time on my 2nd gen Ryzen 7. You likely want JSON for other tooling but CSV is great for looking at by hand.","title":"Run WELM AKA living the dream"},{"location":"logging/logstash_to_vector/","text":"Vector from Logstash As a long time logstash user ive recently been looking at alternatives to broaden my experience and also to deal with any future licensing issues due to logstash now no longer being apache licensed (and no open distro logstash/beats). Naturally FluentD and FluentBit are the main choice here, but they are done to death , I wanted something new and I found Vector which is a RUST based log pipeline which looked promising so this is some notes on trying it out coming from logstash Introduction Vector works the like logstash with a 3 stage pipleine. The following table details how they are named logstash vector input sources filter transforms output sinks Sources (input) vector sources are pretty straight forward, the same as you would use for logstash inputs. There are some preconfigured ones for certain solutions ie Apache HTTPD AWS S3 Docker MongoDB These act like \"module\" in logtsash being ready to use nearly. There are so also more generic ones which you use for most things ie. File Syslog http STDIN Vector Sources Transforms (fiilter) todo Sinks (output) todo Wrap up You can now hail vectron vector","title":"Vector from Logstash"},{"location":"logging/logstash_to_vector/#vector-from-logstash","text":"As a long time logstash user ive recently been looking at alternatives to broaden my experience and also to deal with any future licensing issues due to logstash now no longer being apache licensed (and no open distro logstash/beats). Naturally FluentD and FluentBit are the main choice here, but they are done to death , I wanted something new and I found Vector which is a RUST based log pipeline which looked promising so this is some notes on trying it out coming from logstash","title":"Vector from Logstash"},{"location":"logging/logstash_to_vector/#introduction","text":"Vector works the like logstash with a 3 stage pipleine. The following table details how they are named logstash vector input sources filter transforms output sinks","title":"Introduction"},{"location":"logging/logstash_to_vector/#sources-input","text":"vector sources are pretty straight forward, the same as you would use for logstash inputs. There are some preconfigured ones for certain solutions ie Apache HTTPD AWS S3 Docker MongoDB These act like \"module\" in logtsash being ready to use nearly. There are so also more generic ones which you use for most things ie. File Syslog http STDIN Vector Sources","title":"Sources (input)"},{"location":"logging/logstash_to_vector/#transforms-fiilter","text":"todo","title":"Transforms (fiilter)"},{"location":"logging/logstash_to_vector/#sinks-output","text":"","title":"Sinks (output)"},{"location":"logging/logstash_to_vector/#todo","text":"","title":"todo"},{"location":"logging/logstash_to_vector/#wrap-up","text":"You can now hail vectron vector","title":"Wrap up"}]}